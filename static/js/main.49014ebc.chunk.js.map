{"version":3,"sources":["DressUpGame/ItemTray.tsx","DressUpGame/DressUpGameColorButton.tsx","DressUpGame/DressUpGameButton.tsx","DressUpGame/DUGColorAndImgLists.tsx","DressUpGame/ImgDisplay.tsx","DressUpGame/DressUpGame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ItemTray","props","state","isTrayOpen","inverse","this","headerClass","useSmallerHeader","className","onClick","setState","trayHeaderTitle","children","React","Component","ColorButtons","color","map","src","ShapeButtonsWithColor","selectedShape","undefined","selectedColor","itemName","itemUrls","shapeUrl","outlineUrl","onShapeSelect","ShapeButtonsWithoutColor","characterUrls","fillUrl","lipsUrls","noseUrls","browUrls","fleshColor","lipColor","bigColorOption","SelectedShape","shape","DressUpGameTryingStuff","storedState","window","localStorage","getItem","JSON","parse","favoriteInput","favorites","character","lips","nose","brow","favorite","name","console","log","type","value","onChange","e","target","saveFavorite","x","renderFavoriteListItem","setItem","stringify","clear","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49014ebc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ItemTray.css'\r\n\r\ninterface ItemTrayProps {\r\n    trayHeaderTitle: string\r\n    useSmallerHeader?: boolean\r\n}\r\ninterface ItemTrayState {\r\n    isTrayOpen: boolean\r\n}\r\nexport class ItemTray extends React.Component<ItemTrayProps, ItemTrayState>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            isTrayOpen: false,\r\n        }\r\n    }\r\n    render(): React.ReactNode {\r\n        var inverse = !this.state.isTrayOpen;\r\n\r\n        var headerClass = \"\";\r\n        if (this.props.useSmallerHeader) {\r\n            headerClass = \"smallerHeader\"\r\n\r\n        }\r\n        return (\r\n            <>\r\n                <h1 className={headerClass} onClick={() => this.setState({ isTrayOpen: inverse })}>\r\n                    {this.state.isTrayOpen ? \"-\" : \"+\"}{this.props.trayHeaderTitle}\r\n                </h1>\r\n                {this.state.isTrayOpen &&\r\n                    <>\r\n                        {this.props.children}\r\n                    </>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './DressUpGame.css'\r\nimport './DressUpGameColors.css'\r\nimport { ItemTray } from './ItemTray';\r\n\r\n\r\ninterface ColorButtonProps {\r\n    onClick: (color: string) => void,\r\n    color: string[]\r\n}\r\n\r\nexport class ColorButtons extends React.Component<ColorButtonProps, {}>{\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <>\r\n                <ItemTray trayHeaderTitle={\"Color\"} useSmallerHeader={true}>\r\n                    {this.props.color.map((color: string) => {\r\n                        return (\r\n                            <>\r\n                                <img\r\n                                    src={\"./imgTesting/color.png\"}\r\n                                    onClick={() => {\r\n                                        this.props.onClick(color)\r\n                                    }}\r\n                                    className={` ${color} clothesTrayImgColor`}\r\n                                />\r\n                            </>\r\n                        )\r\n                    })}\r\n                </ItemTray>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './DressUpGame.css'\r\nimport './DressUpGameColors.css'\r\nimport { ColorButtons } from './DressUpGameColorButton';\r\nimport { ItemTray } from './ItemTray';\r\nimport { ShapeUrl, Shape } from './DUGColorAndImgLists';\r\n\r\ninterface ShapeButtonProps {\r\n    itemName: string,\r\n    itemUrls: ShapeUrl[],\r\n    onShapeSelect: (shape: Shape) => void,\r\n    color: string[]\r\n}\r\ninterface ShapeButtonState {\r\n    selectedShape: ShapeUrl | undefined\r\n    selectedColor: string\r\n}\r\nexport class ShapeButtonsWithColor extends React.Component<ShapeButtonProps, ShapeButtonState>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            selectedShape: undefined,\r\n            selectedColor: \"grey\"\r\n        }\r\n    }\r\n    render(): React.ReactNode {\r\n        return (\r\n            <>\r\n                <ItemTray trayHeaderTitle={this.props.itemName}>\r\n                    <>\r\n                        {this.props.itemUrls.map((shapeUrl: ShapeUrl) => {\r\n                            return (\r\n                                <img\r\n                                    src={shapeUrl.outlineUrl}\r\n                                    className=\"clothesTrayImg\"\r\n                                    onClick={() => {\r\n                                        this.setState({ selectedShape: shapeUrl });\r\n                                        this.props.onShapeSelect({ ...shapeUrl, color: this.state.selectedColor })\r\n                                    }} />\r\n                            )\r\n                        })}\r\n                        <ColorButtons color={this.props.color} onClick={(color) => {\r\n                            this.setState({ selectedColor: color });\r\n                            if (this.state.selectedShape) {\r\n                                this.props.onShapeSelect({ ...this.state.selectedShape, color: color })\r\n                            }\r\n                        }} />\r\n\r\n                    </>\r\n                </ItemTray>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\ninterface ShapeButtonPropsNC {\r\n    itemName: string,\r\n    itemUrls: ShapeUrl[],\r\n    onShapeSelect: (shape: Shape) => void,\r\n}\r\ninterface ShapeButtonStateNC {\r\n    selectedShape: ShapeUrl | undefined\r\n}\r\nexport class ShapeButtonsWithoutColor extends React.Component<ShapeButtonPropsNC, ShapeButtonStateNC>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            selectedShape: undefined,\r\n        }\r\n    }\r\n    render(): React.ReactNode {\r\n        return (\r\n            <>\r\n                <ItemTray trayHeaderTitle={this.props.itemName}>\r\n                    <>\r\n                        {this.props.itemUrls.map((shapeUrl: ShapeUrl) => {\r\n                            return (\r\n                                <img\r\n                                    src={shapeUrl.outlineUrl}\r\n                                    className=\"clothesTrayImg\"\r\n                                    onClick={() => {\r\n                                        this.setState({ selectedShape: shapeUrl });\r\n                                        this.props.onShapeSelect({ ...shapeUrl, })\r\n                                    }} />\r\n                            )\r\n                        })}\r\n                    </>\r\n                </ItemTray>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n//hat and shirt button setup\r\n\r\n\r\ninterface ButtonProps {\r\n    itemName: string,\r\n    imgUrls: string[],\r\n    onClick: (imgUrl: string) => void\r\n}\r\ninterface ButtonState {\r\n    isTrayOpen: boolean\r\n}\r\nexport class ClothingButtons extends React.Component<ButtonProps, ButtonState>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            isTrayOpen: false\r\n        }\r\n    }\r\n    render(): React.ReactNode {\r\n        var inverse = !this.state.isTrayOpen;\r\n        // boolean ? \"if true\" : \"if false\"\r\n        return (\r\n            <>\r\n                <h1 onClick={() => this.setState({ isTrayOpen: inverse })}>\r\n                    {this.state.isTrayOpen ? \"-\" : \"+\"}{this.props.itemName}</h1>\r\n                {this.state.isTrayOpen && this.props.imgUrls.map((imgUrl: string) => {\r\n                    return (\r\n\r\n                        <img\r\n                            src={imgUrl}\r\n                            className=\"clothesTrayImg\"\r\n                            onClick={() => this.props.onClick(imgUrl)} />\r\n\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n//what the call looks like\r\n//<ClothingButtons itemName='Hats 5' imgUrls={hatImgs} onClick={(url) => this.setState({ hatUrl: url })} />\r\n","import React from 'react';\r\nimport './DressUpGame.css'\r\nimport './DressUpGameColors.css'\r\n\r\nexport interface ShapeUrl {\r\n    outlineUrl: string\r\n    fillUrl?: string\r\n}\r\nexport interface Shape extends ShapeUrl {\r\n    color?: string\r\n}\r\n\r\nexport let characterUrls: ShapeUrl[] = [\r\n    { outlineUrl: './DUG/girlOutline.png', fillUrl: \"./DUG/girlColor.png\" },\r\n];\r\n\r\nexport let lipsUrls: ShapeUrl[] = [\r\n    { outlineUrl: './DUG/lipsOL1.png', fillUrl: \"./DUG/lipsC1.png\" },\r\n    { outlineUrl: './DUG/lipsOL2.png', fillUrl: \"./DUG/lipsC2.png\" },\r\n    { outlineUrl: './DUG/lipsOL3.png', fillUrl: \"./DUG/lipsC3.png\" },\r\n    { outlineUrl: './DUG/lipsOL4.png', fillUrl: \"./DUG/lipsC4.png\" },\r\n    { outlineUrl: './DUG/lipsOL5.png', fillUrl: \"./DUG/lipsC5.png\" },\r\n    { outlineUrl: './DUG/lipsOL6.png', fillUrl: \"./DUG/lipsC6.png\" },\r\n];\r\n\r\nexport let noseUrls: ShapeUrl[] = [\r\n    { outlineUrl: './DUG/nose1.png', fillUrl: \"\" },\r\n    { outlineUrl: './DUG/nose2.png', fillUrl: \"\" },\r\n    { outlineUrl: './DUG/nose3.png', fillUrl: \"\" },\r\n    { outlineUrl: './DUG/nose4.png', fillUrl: \"\" },\r\n];\r\n\r\nexport let browUrls: ShapeUrl[] = [\r\n    { outlineUrl: './DUG/browOL1.png', fillUrl: \"./DUG/browC1.png\" },\r\n    { outlineUrl: './DUG/browOL2.png', fillUrl: \"./DUG/browC2.png\" },\r\n    { outlineUrl: './DUG/browOL3.png', fillUrl: \"./DUG/browC3.png\" },\r\n    { outlineUrl: './DUG/browOL4.png', fillUrl: \"./DUG/browC4.png\" },\r\n    { outlineUrl: './DUG/browOL5.png', fillUrl: \"./DUG/browC5.png\" },\r\n];\r\n\r\n\r\n\r\n\r\nexport const fleshColor: string[] = [\r\n    \"skin1\",\r\n    \"skin2\",\r\n    \"skin3\",\r\n    \"skin4\",\r\n    \"skin5\",\r\n    \"skin6\",\r\n    \"skin7\",\r\n    \"skin8\",\r\n    \"skin9\",\r\n    \"skin10\"\r\n]\r\n\r\nexport const lipColor: string[] = [\r\n    \"lip1\",\r\n    \"lip2\",\r\n    \"lip3\",\r\n    \"lip4\",\r\n    \"lip5\",\r\n    \"lip6\",\r\n    \"lip7\",\r\n    \"lip8\"\r\n]\r\n\r\nexport const bigColorOption: string[] = [\r\n    \"color1\",\r\n    \"color2\",\r\n    \"color3\",\r\n    \"color4\",\r\n    \"color5\",\r\n    \"color6\",\r\n    \"color7\",\r\n    \"color8\",\r\n    \"color9\",\r\n    \"color10\",\r\n    \"color11\",\r\n    \"color12\",\r\n    \"color13\",\r\n    \"color14\",\r\n    \"color15\",\r\n    \"color16\",\r\n    \"color17\",\r\n    \"color18\",\r\n    \"color19\",\r\n    \"color20\",\r\n    \"color21\",\r\n    \"color22\",\r\n    \"color23\",\r\n    \"color24\",\r\n    \"color25\",\r\n    \"color26\",\r\n    \"color27\",\r\n    \"color28\",\r\n    \"color29\",\r\n    \"color30\",\r\n    \"color31\",\r\n    \"color32\",\r\n    \"color33\",\r\n    \"color34\",\r\n    \"color35\",\r\n    \"color36\",\r\n    \"color37\",\r\n    \"color38\",\r\n    \"color39\",\r\n    \"color40\",\r\n    \"color41\",\r\n    \"color42\",\r\n    \"color43\",\r\n    \"color44\",\r\n    \"color45\",\r\n    \"color46\",\r\n    \"color47\",\r\n    \"color48\",\r\n    \"color49\",\r\n    \"color50\",\r\n    \"color51\",\r\n    \"color52\",\r\n    \"color53\",\r\n    \"color54\",\r\n]\r\n\r\n","import React from 'react';\r\nimport './DressUpGame.css'\r\nimport './DressUpGameColors.css'\r\nimport { Shape } from './DUGColorAndImgLists';\r\n\r\nexport class SelectedShape extends React.Component<{ shape: Shape }, {}> {\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n\r\n            <div>\r\n                <img src={this.props.shape.fillUrl} className={this.props.shape.color + \" body\"} />\r\n                <img src={this.props.shape.outlineUrl} className=\"body \" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './DressUpGame.css'\r\nimport './DressUpGameColors.css'\r\nimport { ShapeButtonsWithColor, ShapeButtonsWithoutColor } from './DressUpGameButton';\r\nimport { bigColorOption, browUrls, characterUrls, fleshColor, lipColor, lipsUrls, noseUrls, Shape } from './DUGColorAndImgLists';\r\nimport { SelectedShape } from './ImgDisplay';\r\n\r\n\r\nexport interface Favorite {\r\n    name: string\r\n    character?: Shape\r\n    lips?: Shape\r\n    nose?: Shape\r\n    brow?: Shape\r\n}\r\n\r\nexport interface DU1State {\r\n    favoriteInput: string\r\n    favorites: Favorite[]\r\n\r\n    character: Shape | undefined\r\n    lips: Shape | undefined\r\n    nose: Shape | undefined\r\n    brow: Shape | undefined\r\n}\r\n\r\nexport class DressUpGameTryingStuff extends React.Component<any, DU1State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        var storedState = window.localStorage.getItem(\"state\");\r\n        if (storedState) {\r\n            this.state = JSON.parse(storedState);\r\n        } else {\r\n            this.state = {\r\n                favoriteInput: \"\",\r\n                favorites: [],\r\n\r\n                character: undefined,\r\n                lips: undefined,\r\n                nose: undefined,\r\n                brow: undefined\r\n            }\r\n        }\r\n    }\r\n\r\n    renderFavoriteListItem(favorite: Favorite): React.ReactNode {\r\n        return (\r\n            <li onClick={() => this.setState({ character: favorite.character, lips: favorite.lips, nose: favorite.nose, brow: favorite.brow })}>\r\n                {favorite.name}\r\n            </li>);\r\n    }\r\n\r\n    saveFavorite(): void {\r\n        this.setState({\r\n            favoriteInput: \"\",\r\n            favorites: [...this.state.favorites,\r\n            {\r\n                name: this.state.favoriteInput,\r\n                character: this.state.character,\r\n                lips: this.state.lips,\r\n                nose: this.state.nose,\r\n                brow: this.state.brow,\r\n            }]\r\n        })\r\n    }\r\n\r\n\r\n    render(): React.ReactNode {\r\n        console.log(this.state)\r\n        return (\r\n            <>\r\n                <div>\r\n\r\n\r\n                    {/* ART */}\r\n                    <div >\r\n                        {this.state.character && <SelectedShape shape={this.state.character} />}\r\n                        {this.state.lips && <SelectedShape shape={this.state.lips} />}\r\n                        {this.state.nose && <SelectedShape shape={this.state.nose} />}\r\n                        {this.state.brow && <SelectedShape shape={this.state.brow} />}\r\n\r\n\r\n\r\n                    </div>\r\n                    {/* Tray */}\r\n                    <div className=\"clothesTray\">\r\n\r\n                        <ShapeButtonsWithColor\r\n                            itemName='Character'\r\n                            itemUrls={characterUrls}\r\n                            onShapeSelect={(shape: Shape) => {\r\n                                console.log(shape);\r\n                                this.setState({ character: shape })\r\n                            }}\r\n                            color={fleshColor}\r\n                        />\r\n                        <ShapeButtonsWithColor\r\n                            itemName='Lips'\r\n                            itemUrls={lipsUrls}\r\n                            onShapeSelect={(shape: Shape) => {\r\n                                console.log(shape);\r\n                                this.setState({ lips: shape })\r\n                            }}\r\n                            color={lipColor}\r\n                        />\r\n                        <ShapeButtonsWithoutColor\r\n                            itemName='Nose'\r\n                            itemUrls={noseUrls}\r\n                            onShapeSelect={(shape: Shape) => {\r\n                                console.log(shape);\r\n                                this.setState({ nose: shape })\r\n                            }}\r\n                        />\r\n                        <ShapeButtonsWithColor\r\n                            itemName='Brows'\r\n                            itemUrls={browUrls}\r\n                            onShapeSelect={(shape: Shape) => {\r\n                                console.log(shape);\r\n                                this.setState({ brow: shape })\r\n                            }}\r\n                            color={bigColorOption}\r\n                        />\r\n\r\n\r\n                    </div>\r\n                    {/* Input and Save */}\r\n                    <span className=\"input\">\r\n                        <input type=\"text\"\r\n                            value={this.state.favoriteInput}\r\n                            onChange={(e) => this.setState({ favoriteInput: e.target.value })} />\r\n                        <button onClick={() => this.saveFavorite()} >Save</button>\r\n                        <ul>{this.state.favorites.map(x => this.renderFavoriteListItem(x))}</ul>\r\n\r\n                        <button onClick={() => this.setState({ nose: undefined, lips: undefined, character: undefined, brow: undefined })}>Reset</button>\r\n                        <button onClick={() => window.localStorage.setItem(\"state\", JSON.stringify(this.state))}>Save to LocalStorage</button>\r\n                        <button onClick={() => window.localStorage.clear()}>Clear LocalStorage</button>\r\n                    </span>\r\n                </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css'\r\nimport ContactList from './ContactList';\r\nimport { ImageDisplay, LotrCharacterDisplay } from './ImageDisplay';\r\nimport { LotrWiki } from './LotrWiki';\r\nimport { PokerComponent } from './CardLibrary/PokerComponent';\r\nimport { ShoppingList } from './ShoppingList';\r\nimport { ColorSwitcher } from './ColorSwitcher';\r\nimport { DressUpGameTryingStuff } from './DressUpGame/DressUpGame';\r\n\r\n\r\nexport class App extends React.Component<any, any>{\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AppRoot\">\r\n        <div>\r\n          <DressUpGameTryingStuff />\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//<LotrCharacterDisplay />\r\n//<LotrWiki />\r\n\r\n// JSX\r\n// state\r\n// props\r\n\r\n// <h1></h1> header 1\r\n// <h2></h2> header 2\r\n// <h3></h3> header 3\r\n// <div></div> horizontal divider\r\n// <span></span> style text\r\n// <button></button> button\r\n// <ul><li>test</li></ul> unorderd list with list item inside called \"test\"\r\n// <></>  empty fragment\r\n\r\n// { /* COMMENT */ } \r\n/* \r\n{\r\n  // COMMENT\r\n} \r\n{ false && <CommentedOutComponent /> }\r\n*/","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}